# ref: https://github.com/actions/runner-images
name: amd64 MacOS

on:
  workflow_run:
    workflows: ["Calculate Version and Trigger Build"]
    types:
      - completed

# Building using the github runner environement directly.
jobs:
  native:
    strategy:
      matrix:
        cmake: [
          {generator: "Unix Makefiles", config: Release, build_target: all, test_target: test, install_target: install},
        ]
      fail-fast: false
    name: MacOS • CMake • ${{ matrix.cmake.generator }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check CMake
        run: cmake --version
      - name: Configure
        run: |
          cmake -S. -Bbuild \
          -G "${{ matrix.cmake.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ matrix.cmake.config }} \
          -DCMAKE_INSTALL_PREFIX=install
      - name: Build
        run: |
          cmake --build build \
          --config ${{ matrix.cmake.config }} \
          --target ${{ matrix.cmake.build_target }} \
          -v -j2
      - name: Test
        run: |
          CTEST_OUTPUT_ON_FAILURE=1 \
          cmake --build build \
          --config ${{ matrix.cmake.config }} \
          --target ${{ matrix.cmake.test_target }} \
          -v
      - name: Install
        run: |
          cmake --build build \
          --config ${{ matrix.cmake.config }} \
          --target ${{ matrix.cmake.install_target }} \
          -v
      
      - name: Download artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            })
            const matchArtifact = artifacts.data.artifacts.find(artifact => artifact.name === "version")
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip'
            })
            fs.writeFileSync('version.zip', Buffer.from(download.data))
      - run: unzip version.zip

      - name: Read version
        run: |
          version=$(cat version.txt)
          echo "version=$version" >> $GITHUB_ENV
        shell: bash
      
      - name: Test-run the executable
        run: |
          chmod +x ./install/bin/SkedaiSatRunner
          ./install/bin/SkedaiSatRunner --input=somefile 2>&1 | tee output.log || true
          if grep -q "INVALID_ARGUMENT: Could not open 'somefile'" output.log; then
            echo "Executable ran but failed due to missing input file. Considering it as successful."
            exit 0
          else
            echo "Executable did not run as expected."
            exit 1
          fi
        shell: bash


      - name: Upload mod_sat_runner as artifact
        uses: actions/upload-artifact@v4
        with:
          name: "skedaiSatRunner_mac_${{ env.version }}"
          path: install/bin/SkedaiSatRunner
